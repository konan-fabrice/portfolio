{"ast":null,"code":"import { DataSource } from '@angular/cdk/collections';\nimport { map } from 'rxjs/operators';\nimport { of as observableOf, merge } from 'rxjs';\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA = [{\n  id: 1,\n  name: 'Hydrogen'\n}, {\n  id: 2,\n  name: 'Helium'\n}, {\n  id: 3,\n  name: 'Lithium'\n}, {\n  id: 4,\n  name: 'Beryllium'\n}, {\n  id: 5,\n  name: 'Boron'\n}, {\n  id: 6,\n  name: 'Carbon'\n}, {\n  id: 7,\n  name: 'Nitrogen'\n}, {\n  id: 8,\n  name: 'Oxygen'\n}, {\n  id: 9,\n  name: 'Fluorine'\n}, {\n  id: 10,\n  name: 'Neon'\n}, {\n  id: 11,\n  name: 'Sodium'\n}, {\n  id: 12,\n  name: 'Magnesium'\n}, {\n  id: 13,\n  name: 'Aluminum'\n}, {\n  id: 14,\n  name: 'Silicon'\n}, {\n  id: 15,\n  name: 'Phosphorus'\n}, {\n  id: 16,\n  name: 'Sulfur'\n}, {\n  id: 17,\n  name: 'Chlorine'\n}, {\n  id: 18,\n  name: 'Argon'\n}, {\n  id: 19,\n  name: 'Potassium'\n}, {\n  id: 20,\n  name: 'Calcium'\n}];\n/**\r\n * Data source for the Rusumes view. This class should\r\n * encapsulate all logic for fetching and manipulating the displayed data\r\n * (including sorting, pagination, and filtering).\r\n */\nexport class RusumesDataSource extends DataSource {\n  constructor() {\n    super();\n    this.data = EXAMPLE_DATA;\n  }\n  /**\r\n   * Connect this data source to the table. The table will only update when\r\n   * the returned stream emits new items.\r\n   * @returns A stream of the items to be rendered.\r\n   */\n  connect() {\n    if (this.paginator && this.sort) {\n      // Combine everything that affects the rendered data into one update\n      // stream for the data-table to consume.\n      return merge(observableOf(this.data), this.paginator.page, this.sort.sortChange).pipe(map(() => {\n        return this.getPagedData(this.getSortedData([...this.data]));\n      }));\n    } else {\n      throw Error('Please set the paginator and sort on the data source before connecting.');\n    }\n  }\n  /**\r\n   *  Called when the table is being destroyed. Use this function, to clean up\r\n   * any open connections or free any held resources that were set up during connect.\r\n   */\n  disconnect() {}\n  /**\r\n   * Paginate the data (client-side). If you're using server-side pagination,\r\n   * this would be replaced by requesting the appropriate data from the server.\r\n   */\n  getPagedData(data) {\n    if (this.paginator) {\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.splice(startIndex, this.paginator.pageSize);\n    } else {\n      return data;\n    }\n  }\n  /**\r\n   * Sort the data (client-side). If you're using server-side sorting,\r\n   * this would be replaced by requesting the appropriate data from the server.\r\n   */\n  getSortedData(data) {\n    if (!this.sort || !this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n    return data.sort((a, b) => {\n      const isAsc = this.sort?.direction === 'asc';\n      switch (this.sort?.active) {\n        case 'name':\n          return compare(a.name, b.name, isAsc);\n        case 'id':\n          return compare(+a.id, +b.id, isAsc);\n        default:\n          return 0;\n      }\n    });\n  }\n}\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}","map":{"version":3,"mappings":"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","names":["DataSource","map","of","observableOf","merge","EXAMPLE_DATA","id","name","RusumesDataSource","constructor","connect","paginator","sort","data","page","sortChange","pipe","getPagedData","getSortedData","Error","disconnect","startIndex","pageIndex","pageSize","splice","active","direction","a","b","isAsc","compare"],"sourceRoot":"","sources":["C:\\Users\\HP\\portefolio\\src\\app\\rusumes\\rusumes-datasource.ts"],"sourcesContent":["import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface RusumesItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: RusumesItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n];\n\n/**\n * Data source for the Rusumes view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class RusumesDataSource extends DataSource<RusumesItem> {\n  data: RusumesItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator | undefined;\n  sort: MatSort | undefined;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<RusumesItem[]> {\n    if (this.paginator && this.sort) {\n      // Combine everything that affects the rendered data into one update\n      // stream for the data-table to consume.\n      return merge(observableOf(this.data), this.paginator.page, this.sort.sortChange)\n        .pipe(map(() => {\n          return this.getPagedData(this.getSortedData([...this.data ]));\n        }));\n    } else {\n      throw Error('Please set the paginator and sort on the data source before connecting.');\n    }\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect(): void {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: RusumesItem[]): RusumesItem[] {\n    if (this.paginator) {\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.splice(startIndex, this.paginator.pageSize);\n    } else {\n      return data;\n    }\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: RusumesItem[]): RusumesItem[] {\n    if (!this.sort || !this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort?.direction === 'asc';\n      switch (this.sort?.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean): number {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}