import { Component, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { Touches } from './touches';
import { Carousel } from './carousel';
import { Container } from './container';
import { Cells } from './cells';
import { Slide } from './slide';
import { Utils } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class CarouselComponent {
    constructor(elementRef, ref) {
        this.elementRef = elementRef;
        this.ref = ref;
        this._isCounter = false;
        this._cellWidth = 200;
        this.isMoving = false;
        this.isNgContent = false;
        this.events = new EventEmitter();
        this.height = 450;
        this.autoplay = true;
        this.autoplayInterval = 5000;
        this.pauseOnHover = true;
        this.dots = false;
        this.margin = 10;
        this.objectFit = 'cover';
        this.minSwipeDistance = 10;
        this.transitionDuration = 200;
        this.transitionTimingFunction = 'ease-out';
        this.counterSeparator = ' / ';
        this.overflowCellsLimit = 3;
        this.listeners = 'mouse and touch';
        this.cellsToShow = 1;
        this.cellsToScroll = 1;
        this.freeScroll = false;
        this.arrows = true;
        this.arrowsOutside = false;
        this.arrowsTheme = 'light';
        this.hostClassCarousel = true;
        this.handleTouchstart = (event) => {
            this.touches.addEventListeners('mousemove', 'handleMousemove');
            this.carousel.handleTouchstart(event);
            this.isMoving = true;
        };
        this.handleHorizontalSwipe = (event) => {
            event.preventDefault();
            this.carousel.handleHorizontalSwipe(event);
        };
        this.handleTouchend = (event) => {
            const { touches } = event;
            this.carousel.handleTouchend(event);
            this.touches.removeEventListeners('mousemove', 'handleMousemove');
            this.isMoving = false;
        };
        this.handleTap = (event) => {
            const outboundEvent = {
                name: 'click'
            };
            const nodes = Array.prototype.slice.call(this.cellsElement.children);
            const cellElement = event.srcElement.closest('.carousel-cell');
            const i = nodes.indexOf(cellElement);
            const cellIndex = nodes.indexOf(cellElement);
            outboundEvent.cellIndex = cellIndex;
        };
    }
    get slideCounter() {
        if (this.carousel) {
            return this.carousel.slideCounter;
        }
    }
    get lapCounter() {
        if (this.carousel) {
            return this.carousel.lapCounter;
        }
    }
    get isLandscape() {
        return window.innerWidth > window.innerHeight;
    }
    get isSafari() {
        const ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('safari') !== -1) {
            return !(ua.indexOf('chrome') > -1);
        }
    }
    get counter() {
        const counter = this.slideCounter;
        return counter + 1 + this.counterSeparator + this.cellLength;
    }
    get cellsElement() {
        return this.elementRef.nativeElement.querySelector('.carousel-cells');
    }
    get isArrows() {
        return this.arrows && !this.freeScroll;
    }
    get isCounter() {
        return this._isCounter && this.cellLength > 1;
    }
    get activeDotIndex() {
        return this.slideCounter % this.cellLength;
    }
    get cellLimit() {
        if (this.carousel) {
            return this.carousel.cellLimit;
        }
    }
    get carouselWidth() {
        return this.elementRef.nativeElement.clientWidth;
    }
    set cellWidth(value) {
        if (value) {
            this._cellWidth = value;
        }
    }
    set isCounter(value) {
        if (value) {
            this._isCounter = value;
        }
    }
    onWindowResize(event) {
        if (this.utils.visibleWidth !== this.savedCarouselWidth) {
            this.resize();
        }
    }
    onMouseEnter() {
        if (this.autoplay && this.pauseOnHover) {
            this.carouselProperties.autoplayIsPossible = false;
            this.carousel.stopAutoplay();
        }
    }
    onMouseLeave() {
        if (this.autoplay && this.pauseOnHover) {
            this.carouselProperties.autoplayIsPossible = true;
            this.carousel.autoplay();
        }
    }
    onDragStart() {
        return false;
    }
    ngOnInit() {
        this.isNgContent = this.cellsElement.children.length > 0;
        this.touches = new Touches({
            element: this.cellsElement,
            listeners: this.listeners,
            mouseListeners: {
                mousedown: 'handleMousedown',
                mouseup: 'handleMouseup'
            }
        });
        this.touches.on('touchstart', this.handleTouchstart);
        this.touches.on('horizontal-swipe', this.handleHorizontalSwipe);
        this.touches.on('touchend', this.handleTouchend);
        this.touches.on('mousedown', this.handleTouchstart);
        this.touches.on('mouseup', this.handleTouchend);
        this.touches.on('tap', this.handleTap);
        this.setDimensions();
    }
    ngAfterViewInit() {
        this.initCarousel();
        this.cellLength = this.getCellLength();
        this.dotsArr = Array(this.cellLength).fill(1);
        this.ref.detectChanges();
        this.carousel.lineUpCells();
        this.savedCarouselWidth = this.carouselWidth;
        /* Start detecting changes in the DOM tree */
        this.detectDomChanges();
    }
    ngOnChanges(changes) {
        const isFirstChange = Object.values(changes).some(change => change.isFirstChange());
        if (!isFirstChange && (changes.width || changes.height)) {
            this.setDimensions();
            this.initCarousel();
            this.carousel.lineUpCells();
            this.ref.detectChanges();
        }
    }
    ngOnDestroy() {
        this.touches.destroy();
        // this.carousel.destroy();
    }
    initCarousel() {
        this.carouselProperties = {
            id: this.id,
            cellsElement: this.elementRef.nativeElement.querySelector('.carousel-cells'),
            hostElement: this.elementRef.nativeElement,
            cellWidth: this.getCellWidth(),
            autoplayInterval: this.autoplayInterval,
            autoplayIsPossible: true,
            overflowCellsLimit: this.overflowCellsLimit,
            visibleWidth: this.width,
            margin: this.margin,
            minSwipeDistance: this.minSwipeDistance,
            transitionDuration: this.transitionDuration,
            transitionTimingFunction: this.transitionTimingFunction,
            videoProperties: this.videoProperties,
            eventHandler: this.events,
            freeScroll: this.freeScroll
        };
        this.utils = new Utils(this.carouselProperties);
        this.cells = new Cells(this.carouselProperties, this.utils);
        this.container = new Container(this.carouselProperties, this.utils, this.cells);
        this.slide = new Slide(this.carouselProperties, this.utils, this.cells, this.container);
        if (this.autoplay && this.carousel) {
            this.carousel.stopAutoplay();
        }
        this.carousel = new Carousel(this.carouselProperties, this.utils, this.cells, this.container, this.slide);
        if (this.autoplay) {
            this.carousel.autoplay();
        }
    }
    resize() {
        this.landscapeMode = this.isLandscape;
        this.savedCarouselWidth = this.carouselWidth;
        this.carouselProperties.cellWidth = this.getCellWidth();
        this.cells.updateProperties(this.carouselProperties);
        this.carousel.updateProperties(this.carouselProperties);
        this.container.updateProperties(this.carouselProperties);
        this.slide.updateProperties(this.carouselProperties);
        this.utils.updateProperties(this.carouselProperties);
        this.carousel.lineUpCells();
        this.slide.select(0);
        this.ref.detectChanges();
    }
    detectDomChanges() {
        const observer = new MutationObserver((mutations) => {
            this.onDomChanges();
        });
        const config = {
            attributes: true,
            childList: true,
            characterData: true
        };
        observer.observe(this.cellsElement, config);
    }
    onDomChanges() {
        this.cellLength = this.getCellLength();
        this.carousel.lineUpCells();
        this.ref.detectChanges();
    }
    setDimensions() {
        this.hostStyleHeight = `${this.height}px`;
        this.hostStyleWidth = `${this.width}px`;
    }
    handleTransitionendCellContainer(event) {
        if (event.target.className === 'carousel-cells') {
            this.carousel.handleTransitionend();
        }
    }
    getCellWidth() {
        const elementWidth = this.carouselWidth;
        if (this.cellsToShow) {
            const margin = this.cellsToShow > 1 ? this.margin : 0;
            const totalMargin = margin * (this.cellsToShow - 1);
            return (elementWidth - totalMargin) / this.cellsToShow;
        }
        if (this._cellWidth === '100%') {
            return elementWidth;
        }
        return this._cellWidth;
    }
    next() {
        this.carousel.next(this.cellsToScroll);
        this.carousel.stopAutoplay();
    }
    prev() {
        this.carousel.prev(this.cellsToScroll);
        this.carousel.stopAutoplay();
    }
    isNextArrowDisabled() {
        if (this.carousel) {
            return this.carousel.isNextArrowDisabled();
        }
    }
    isPrevArrowDisabled() {
        if (this.carousel) {
            return this.carousel.isPrevArrowDisabled();
        }
    }
    getCellLength() {
        return this.cellsElement.children.length;
    }
}
CarouselComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CarouselComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CarouselComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: CarouselComponent, selector: "carousel, [carousel]", inputs: { id: "id", height: "height", width: "width", autoplay: "autoplay", autoplayInterval: "autoplayInterval", pauseOnHover: "pauseOnHover", dots: "dots", borderRadius: "borderRadius", margin: "margin", objectFit: "objectFit", minSwipeDistance: "minSwipeDistance", transitionDuration: "transitionDuration", transitionTimingFunction: "transitionTimingFunction", videoProperties: "videoProperties", counterSeparator: "counterSeparator", overflowCellsLimit: "overflowCellsLimit", listeners: "listeners", cellsToShow: "cellsToShow", cellsToScroll: "cellsToScroll", freeScroll: "freeScroll", arrows: "arrows", arrowsOutside: "arrowsOutside", arrowsTheme: "arrowsTheme", cellWidth: "cellWidth", isCounter: ["counter", "isCounter"] }, outputs: { events: "events" }, host: { listeners: { "window:resize": "onWindowResize($event)", "mouseenter": "onMouseEnter($event)", "mouseleave": "onMouseLeave($event)", "dragstart": "onDragStart($event)" }, properties: { "class.carousel": "this.hostClassCarousel", "style.height": "this.hostStyleHeight", "style.width": "this.hostStyleWidth" } }, usesOnChanges: true, ngImport: i0, template: "<div class=\"carousel-counter\" *ngIf=\"isCounter\">{{counter}}</div>\r\n\r\n<div class=\"carousel-container\" [class.carousel-moving]=\"isMoving\">\r\n\t<div class=\"carousel-cells\" #cells (transitionend)=\"handleTransitionendCellContainer($event)\">\r\n\t\t<ng-content></ng-content>\r\n\t</div>\r\n\r\n\t<div class=\"carousel-dots\" *ngIf=\"dots\">\r\n\t\t<div class=\"carousel-dot\" [class.carousel-dot-active]=\"i === activeDotIndex\" *ngFor=\"let dot of dotsArr; index as i\"></div>\r\n\t</div>\r\n</div>\r\n\r\n<div class=\"carousel-arrows\"\r\n\t[class.carousel-arrows-outside]=\"arrowsOutside\"\r\n\t[class.carousel-dark-arrows]=\"arrowsTheme === 'dark'\"\r\n\t*ngIf=\"isArrows\">\r\n\r\n\t<div class=\"carousel-arrow carousel-arrow-prev\" [class.carousel-arrow-disabled]=\"isPrevArrowDisabled()\" (click)=\"prev()\"></div>\r\n\t<div class=\"carousel-arrow carousel-arrow-next\" [class.carousel-arrow-disabled]=\"isNextArrowDisabled()\" (click)=\"next()\"></div>\r\n</div>\r\n", styles: [":host{-webkit-user-select:none;user-select:none;position:relative;z-index:10000;top:0;left:0;transform-origin:top left;display:block;box-sizing:border-box;width:100%;height:100%}:host .carousel-container{cursor:grab;overflow:hidden;width:100%;height:100%}:host .carousel-container.carousel-moving{cursor:grabbing}:host .carousel-counter{position:absolute;z-index:30;top:8px;right:24px;padding:5px 7px;font-size:11px;line-height:initial;color:#fff;text-align:right;background-color:#1725444d;border-radius:13px;transition:opacity .2s}:host ::ng-deep .carousel-cells{will-change:transform;display:block;width:100%;height:100%;transition:transform .2s}:host ::ng-deep .carousel-cells .carousel-cell{position:absolute;overflow:hidden;width:100%;height:100%}:host ::ng-deep .carousel-cells .carousel-cell img,:host ::ng-deep .carousel-cells .carousel-cell video{position:relative;width:100%;height:100%;object-fit:contain}:host ::ng-deep .carousel-cells .carousel-cell img.swiper-hide{display:none}:host ::ng-deep .carousel-cells .carousel-cell .carousel-play{position:absolute;z-index:1;inset:0}:host .carousel-arrow{cursor:pointer;position:absolute;z-index:10;top:50%;display:inline-block;width:20px;height:20px;margin-top:-10px;opacity:0;border:solid rgba(255,255,255,.6);border-width:0 4px 4px 0;border-radius:2px;transition:opacity .1s ease-in-out}:host .carousel-arrow:before{content:\" \";position:absolute;top:-50px;left:-50px;display:inline-block;width:100px;height:100px;border:0}:host .carousel-arrow:hover{opacity:.5}:host .carousel-arrow-prev{left:35px;transform:rotate(135deg)}:host .carousel-arrow-next{right:35px;transform:rotate(-45deg)}:host .carousel-arrows-outside .carousel-arrow-prev{left:-60px}:host .carousel-arrows-outside .carousel-arrow-next{right:-60px}:host .carousel-dark-arrows .carousel-arrow{filter:invert(1)}:host .carousel-arrow-disabled{display:none}:host .carousel-dots{position:absolute;z-index:10;right:0;bottom:0;left:0;text-align:center}:host .carousel-dots .carousel-dot{display:inline-block;width:8px;height:8px;margin:4px;border:2px solid #fff;border-radius:100px}:host .carousel-dots .carousel-dot-active{background-color:#fff}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CarouselComponent, decorators: [{
            type: Component,
            args: [{ selector: 'carousel, [carousel]', template: "<div class=\"carousel-counter\" *ngIf=\"isCounter\">{{counter}}</div>\r\n\r\n<div class=\"carousel-container\" [class.carousel-moving]=\"isMoving\">\r\n\t<div class=\"carousel-cells\" #cells (transitionend)=\"handleTransitionendCellContainer($event)\">\r\n\t\t<ng-content></ng-content>\r\n\t</div>\r\n\r\n\t<div class=\"carousel-dots\" *ngIf=\"dots\">\r\n\t\t<div class=\"carousel-dot\" [class.carousel-dot-active]=\"i === activeDotIndex\" *ngFor=\"let dot of dotsArr; index as i\"></div>\r\n\t</div>\r\n</div>\r\n\r\n<div class=\"carousel-arrows\"\r\n\t[class.carousel-arrows-outside]=\"arrowsOutside\"\r\n\t[class.carousel-dark-arrows]=\"arrowsTheme === 'dark'\"\r\n\t*ngIf=\"isArrows\">\r\n\r\n\t<div class=\"carousel-arrow carousel-arrow-prev\" [class.carousel-arrow-disabled]=\"isPrevArrowDisabled()\" (click)=\"prev()\"></div>\r\n\t<div class=\"carousel-arrow carousel-arrow-next\" [class.carousel-arrow-disabled]=\"isNextArrowDisabled()\" (click)=\"next()\"></div>\r\n</div>\r\n", styles: [":host{-webkit-user-select:none;user-select:none;position:relative;z-index:10000;top:0;left:0;transform-origin:top left;display:block;box-sizing:border-box;width:100%;height:100%}:host .carousel-container{cursor:grab;overflow:hidden;width:100%;height:100%}:host .carousel-container.carousel-moving{cursor:grabbing}:host .carousel-counter{position:absolute;z-index:30;top:8px;right:24px;padding:5px 7px;font-size:11px;line-height:initial;color:#fff;text-align:right;background-color:#1725444d;border-radius:13px;transition:opacity .2s}:host ::ng-deep .carousel-cells{will-change:transform;display:block;width:100%;height:100%;transition:transform .2s}:host ::ng-deep .carousel-cells .carousel-cell{position:absolute;overflow:hidden;width:100%;height:100%}:host ::ng-deep .carousel-cells .carousel-cell img,:host ::ng-deep .carousel-cells .carousel-cell video{position:relative;width:100%;height:100%;object-fit:contain}:host ::ng-deep .carousel-cells .carousel-cell img.swiper-hide{display:none}:host ::ng-deep .carousel-cells .carousel-cell .carousel-play{position:absolute;z-index:1;inset:0}:host .carousel-arrow{cursor:pointer;position:absolute;z-index:10;top:50%;display:inline-block;width:20px;height:20px;margin-top:-10px;opacity:0;border:solid rgba(255,255,255,.6);border-width:0 4px 4px 0;border-radius:2px;transition:opacity .1s ease-in-out}:host .carousel-arrow:before{content:\" \";position:absolute;top:-50px;left:-50px;display:inline-block;width:100px;height:100px;border:0}:host .carousel-arrow:hover{opacity:.5}:host .carousel-arrow-prev{left:35px;transform:rotate(135deg)}:host .carousel-arrow-next{right:35px;transform:rotate(-45deg)}:host .carousel-arrows-outside .carousel-arrow-prev{left:-60px}:host .carousel-arrows-outside .carousel-arrow-next{right:-60px}:host .carousel-dark-arrows .carousel-arrow{filter:invert(1)}:host .carousel-arrow-disabled{display:none}:host .carousel-dots{position:absolute;z-index:10;right:0;bottom:0;left:0;text-align:center}:host .carousel-dots .carousel-dot{display:inline-block;width:8px;height:8px;margin:4px;border:2px solid #fff;border-radius:100px}:host .carousel-dots .carousel-dot-active{background-color:#fff}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { events: [{
                type: Output
            }], id: [{
                type: Input
            }], height: [{
                type: Input
            }], width: [{
                type: Input
            }], autoplay: [{
                type: Input
            }], autoplayInterval: [{
                type: Input
            }], pauseOnHover: [{
                type: Input
            }], dots: [{
                type: Input
            }], borderRadius: [{
                type: Input
            }], margin: [{
                type: Input
            }], objectFit: [{
                type: Input
            }], minSwipeDistance: [{
                type: Input
            }], transitionDuration: [{
                type: Input
            }], transitionTimingFunction: [{
                type: Input
            }], videoProperties: [{
                type: Input
            }], counterSeparator: [{
                type: Input
            }], overflowCellsLimit: [{
                type: Input
            }], listeners: [{
                type: Input
            }], cellsToShow: [{
                type: Input
            }], cellsToScroll: [{
                type: Input
            }], freeScroll: [{
                type: Input
            }], arrows: [{
                type: Input
            }], arrowsOutside: [{
                type: Input
            }], arrowsTheme: [{
                type: Input
            }], cellWidth: [{
                type: Input,
                args: ['cellWidth']
            }], isCounter: [{
                type: Input,
                args: ['counter']
            }], hostClassCarousel: [{
                type: HostBinding,
                args: ['class.carousel']
            }], hostStyleHeight: [{
                type: HostBinding,
                args: ['style.height']
            }], hostStyleWidth: [{
                type: HostBinding,
                args: ['style.width']
            }], onWindowResize: [{
                type: HostListener,
                args: ['window:resize', ['$event']]
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter', ['$event']]
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave', ['$event']]
            }], onDragStart: [{
                type: HostListener,
                args: ['dragstart', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,