import { Properties as CarouselProperties } from './interfaces';
export declare class Container {
    private carouselProperties;
    private utils;
    private cells;
    initialPositionX: number;
    initialElementPositionX: number;
    pullLimit: number;
    startTime: number;
    startX: number;
    moveX: number;
    isSwipeInProgress: boolean;
    get visibleWidth(): any;
    get overflowCellsLimit(): any;
    get element(): HTMLElement;
    get freeScroll(): boolean;
    get fullCellWidth(): number;
    get numberOfVisibleCells(): any;
    get transitionDuration(): number;
    get transitionTimingFunction(): "linear" | "ease" | "ease-in" | "ease-out" | "ease-in-out";
    get cellLength(): any;
    get tooFewCells(): boolean;
    get disabled(): boolean;
    get margin(): number;
    constructor(carouselProperties: CarouselProperties, utils: any, cells: any);
    updateProperties(carouselProperties: CarouselProperties): void;
    init(): void;
    handleTouchstart(): void;
    handleHorizontalSwipe(): void;
    handleTouchend(simpleProcessing?: boolean): void;
    move(): void;
    getMovePositionX(): number;
    getDistance(): number;
    detectPulled(): {
        edge: string;
        positionX: number;
        overflowX: number;
    } | undefined;
    slowdownOnPull(_positionX: number): number;
    finishMoving(): void;
    getInertia(): number;
    getAlignedPositionOnPull(newPositionX: number): number;
    getCurrentPositionX(): number;
    getEndPosition(): number;
    transformPositionX(value: number, duration?: number): void;
    getWidth(): number;
    setWidth(): void;
    setInitialPosition(position: number): void;
    getElementPosition(): DOMRect;
    getInitialElementPositionX(): number;
    clearInitialValues(): void;
    getDirection(): "left" | "right" | undefined;
}
